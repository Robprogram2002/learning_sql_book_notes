## INTRODUCTION TO DATABASES 
A database is nothing more than a set of related information

While a telephone book is certainly a ubiquitous and frequently used database, it suffers from the following:
    * Finding a person’s telephone number can be time consuming,
    * A telephone book is indexed only by last/first names
    *the telephone book is printed, the information becomes less and less accurate as people move

The same drawbacks attributed to telephone books can also apply to any manual data storage system.


Because of the cumbersome nature of paper databases, some of the first computer applications developed were 
database systems, which are computerized data storage and retrieval mechanisms. Because a database system 
stores data electronically rather than on paper, a database system is able to retrieve data more quickly, 
index data in multiple ways, and deliver up-to-the-minute information to its user community.


#### The Relational Model
In 1970, Dr. E. F. Codd of IBM’s research laboratory published a paper titled “A Relational Model of Data 
for Large Shared Data Banks” that proposed that data be represented as sets of tables.

 -- Rather than using pointers to navigate between related entities, redundant data is used to link records 
 -- in different tables. 

Each table in a relational database includes information that uniquely identifies a row in that table (known as 
the primary key), along with additional information needed to describe the entity completely.

Looking again at the customer table, the cust_id column holds a different number for each customer; George Blake, 
for example, can be uniquely identified by customer ID 1. No other customer will ever be assigned that identifier, 
and no other information is needed to locate George Blake’s data in the customer table.

In this example, choosing fname/lname as the primary key would be referred to as a natural key, whereas the choice 
of cust_id would be referred to as a surrogate key. The decision whether to employ natural or surrogate keys is up 
to the database designer, but in this particular case the choice is clear, since a person’s last name may change 
(such as when a person adopts a spouse’s last name), and primary key columns should never be allowed to change 
once a value has been assigned.

Some of the tables also include information used to navigate to another table; this is where the “redundant data” 
mentioned earlier comes in. 

These columns are known as foreign keys, and they serve the same purpose as the lines that connect the entities in the 
hierarchical and network versions of the account information. If you are looking at a particular account record and 
want to know more information about the customer who opened the account, you would take the value of the cust_id column 
and use it to find the appropriate row in the customer table (this process is known, in relational database lingo, as a 
join; 

It might seem wasteful to store the same data many times, but the relational model is quite clear on what redundant 
data may be stored. For example, it is proper for the account table to include a column for the unique identifier of 
the customer who opened the account, but it is not proper to include the customer’s first and last names in the 
account table as well. If a customer were to change her name, for example, you want to make sure that there is only 
one place in the database that holds the customer’s name; otherwise, the data might be changed in one place but not 
another, causing the data in the database to be unreliable.

It is also not proper for a single column to contain multiple pieces of information, such as a name column that contains 
both a person’s first and last names, or an address column that contains street, city, state, and zip code information. 
The process of refining a database design to ensure that each independent piece of information is in only one place 
(except for foreign keys) is known as normalization.


###### What Is SQL? 

Along with Codd’s definition of the relational model, he proposed a language called DSL/Alpha for manipulating the data 
in relational tables. 

SQL goes hand in hand with the relational model because the result of an SQL query is a table (also called, in this 
context, a result set). Thus, a new permanent table can be created in a relational database simply by storing the 
result set of a query. Similarly, a query can use both permanent tables and the result sets from other queries as 
inputs

One final note: SQL is not an acronym for anything (although many people will insist it stands for “Structured Query Language”). 


##### SQL Statement Classes

The SQL language is divided into several distinct parts: the parts that we explore in this book include SQL schema 
statements, which are used to define the data structures stored in the database; SQL data statements, which are used 
to manipulate the data structures previously defined using SQL schema statements; and SQL transaction statements, 
which are used to begin, end, and roll back transactions 

All database elements created via SQL schema statements are stored in a special set of tables called the data dictionary. 
This “data about the database” is known collectively as metadata

Just like tables that you create yourself, data dictionary tables can be queried via a select statement, thereby 
allowing you to discover the current data structures deployed in the database at runtime


#### SQL: A Nonprocedural Language

A procedural language defines both the desired results and the mechanism, or process, by which the results are 
generated. Nonprocedural languages also define the desired results, but the process by which the results are generated 
is left to an external agent.

With SQL, however, you will need to give up some of the control you are used to, because SQL statements define the 
necessary inputs and outputs, but the manner in which a statement is executed is left to a component of your database 
engine known as the optimizer. The optimizer’s job is to look at your SQL statements and, taking into account how your 
tables are configured and what indexes are available, decide the most efficient execution path (well, not always the 
most efficient). Most database engines will allow you to influence the optimizer’s decisions by specifying optimizer 
hints, such as suggesting that a particular index be used;

Therefore, with SQL, you will not be able to write complete applications. Unless you are writing a simple script to 
manipulate certain data, you will need to integrate SQL with your favorite programming language.

